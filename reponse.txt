L'utilisation de tropcomp pourrait être utile avec des meilleures valeurs de seuil.
En effet, avec des seuils de 1% et de 5%, nous n'avons pas vu de fichier en sortie, donc ça ne donnerait pas d'information pour le développeur. 
En revanche avec un seuil de 10% on voit que la sortie donne effectivement des informations utiles.

L'heuristique de tropcomp, soit qu'un fichier de test trop complexe aurait beaucoup de lignes de code et peu de tests en comparaison, est assez intuitif, mais il peut évidemment être significativement amélioré.
En effet, dans l'implémentation que nous avons en ce moment, seulement le top <seuil>% des fichiers avec le plus de lignes de code peuvent être mis en sortie, ce qui signifie que même si des fichiers plus courts sont très complexes, il ne vont jamais être détectés. Par exemple, les fichiers qui ont des lignes de code très longues, mais peu de lignes de code au total, ne seront jamais détectés.

Une amélioration possible serait de pouvoir ajuster les valeurs de biais vers la longueur du code ou vers le ratio de tests/longueur.
Ceci permettrait de mieux détecter les fichiers de test trop complexes, même s'ils sont courts, ou les fichiers de code très longs, même s'ils ont beaucoup de tests.

Une autre amélioration serait aussi de considérer la longueur moyenne des lignes de code.
En effet, si on considère simplement le nombre de lignes, un fichier qui met beaucoup de code sur la même ligne va être manqué dans notre analyse.